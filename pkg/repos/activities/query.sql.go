// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v2.2.2-wicked-fork
// source: query.sql

package activities

import (
	"context"
	"crypto/sha256"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"sync"
	"time"

	"github.com/rs/zerolog/log"
)

const getActivitiesByAction = `-- name: GetActivitiesByAction :many
select id, action, parameter, created_at from activities where action = $1
`

// -- timeout : 250ms
// -- cache : 1m
func (q *Queries) GetActivitiesByAction(ctx context.Context, action string) ([]Activity, error) {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*250)
	defer cancel()
	q.db.CountIntent("activities.GetActivitiesByAction")
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 60000)
		rows, err := q.db.WQuery(qctx, "activities.GetActivitiesByAction", getActivitiesByAction, action)
		if err != nil {
			return []Activity(nil), 0, err
		}
		defer rows.Close()
		var items []Activity
		for rows.Next() {
			var i *Activity = new(Activity)
			if err := rows.Scan(
				&i.ID,
				&i.Action,
				&i.Parameter,
				&i.CreatedAt,
			); err != nil {
				return []Activity(nil), 0, err
			}
			items = append(items, *i)
		}
		if err := rows.Err(); err != nil {
			return []Activity(nil), 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]Activity), err
	}
	var items []Activity
	err := q.cache.GetWithTtl(qctx, "activities:GetActivitiesByAction:"+hashIfLong(fmt.Sprintf("%+v", action)), &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return items, err
}

const insert = `-- name: Insert :exec
INSERT INTO activities (
   action, parameter, created_at
) VALUES (
  $1, $2, NOW()
)
`

type InsertParams struct {
	Action    string
	Parameter *string
}

// -- timeout : 1s
// -- invalidate : [GetActivitiesByAction]
func (q *Queries) Insert(ctx context.Context, arg InsertParams, getActivitiesByAction *string) error {
	qctx, cancel := context.WithTimeout(ctx, time.Millisecond*1000)
	defer cancel()
	_, err := q.db.WExec(qctx, "activities.Insert", insert, arg.Action, arg.Parameter)
	if err != nil {
		return err
	}
	// invalidate
	_ = q.db.PostExec(func() error {
		anyErr := make(chan error, 1)
		var wg sync.WaitGroup
		wg.Add(1)
		go func() {
			defer wg.Done()
			if getActivitiesByAction != nil {
				key := "activities:GetActivitiesByAction:" + hashIfLong(fmt.Sprintf("%+v", (*getActivitiesByAction)))
				err = q.cache.Invalidate(ctx, key)
				if err != nil {
					log.Ctx(ctx).Error().Err(err).Msgf(
						"Failed to invalidate: %s", key)
					anyErr <- err
				}
			}
		}()
		wg.Wait()
		close(anyErr)
		return <-anyErr
	})
	return nil
}

//// auto generated functions

func (q *Queries) Dump(ctx context.Context, beforeDump ...BeforeDump) ([]byte, error) {
	sql := "SELECT id,action,parameter,created_at FROM \"activities\" ORDER BY id,action,parameter,created_at ASC;"
	rows, err := q.db.WQuery(ctx, "activities.Dump", sql)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var v Activity
		if err := rows.Scan(&v.ID, &v.Action, &v.Parameter, &v.CreatedAt); err != nil {
			return nil, err
		}
		for _, applyBeforeDump := range beforeDump {
			applyBeforeDump(&v)
		}
		items = append(items, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	bytes, err := json.MarshalIndent(items, "", "  ")
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

func (q *Queries) Load(ctx context.Context, data []byte) error {
	sql := "INSERT INTO \"activities\" (id,action,parameter,created_at) VALUES ($1,$2,$3,$4);"
	rows := make([]Activity, 0)
	err := json.Unmarshal(data, &rows)
	if err != nil {
		return err
	}
	for _, row := range rows {
		_, err := q.db.WExec(ctx, "activities.Load", sql, row.ID, row.Action, row.Parameter, row.CreatedAt)
		if err != nil {
			return err
		}
	}
	return nil
}

func hashIfLong(v string) string {
	if len(v) > 64 {
		hash := sha256.Sum256([]byte(v))
		return "h(" + hex.EncodeToString(hash[:]) + ")"
	}
	return v
}

func ptrStr[T any](v *T) string {
	if v == nil {
		return "<nil>"
	}
	return fmt.Sprintf("%+v", *v)
}

// eliminate unused error
var _ = log.Logger
var _ = fmt.Sprintf("")
var _ = time.Now()
var _ = json.RawMessage{}
var _ = sha256.Sum256(nil)
var _ = hex.EncodeToString(nil)
var _ = sync.WaitGroup{}
