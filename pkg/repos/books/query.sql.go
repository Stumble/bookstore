// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0-67-g8e483d59-wicked-fork
// source: query.sql

package books

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/rs/zerolog/log"
)

type BulkInsertParams struct {
	Name        string
	Description string
	Metadata    []byte
	Category    BookCategory
	Price       pgtype.Numeric
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, name, description, metadata, category, price, created_at, updated_at FROM books
`

// -- cache : 10m
func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 600000)
		rows, err := q.db.WQuery(ctx, "GetAllBooks", getAllBooks)
		if err != nil {
			return nil, 0, err
		}
		defer rows.Close()
		var items []Book
		for rows.Next() {
			var i *Book = new(Book)
			if err := rows.Scan(
				&i.ID,
				&i.Name,
				&i.Description,
				&i.Metadata,
				&i.Category,
				&i.Price,
				&i.CreatedAt,
				&i.UpdatedAt,
			); err != nil {
				return nil, 0, err
			}
			items = append(items, *i)
		}
		if err := rows.Err(); err != nil {
			return nil, 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]Book), err
	}
	var items []Book
	err := q.cache.GetWithTtl(ctx, "books:GetAllBooks", &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return items, err
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, name, description, metadata, category, price, created_at, updated_at FROM books WHERE id = $1
`

// -- cache : 10m
func (q *Queries) GetBookByID(ctx context.Context, id int64) (*Book, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 600000)
		row := q.db.WQueryRow(ctx, "GetBookByID", getBookByID, id)
		var i *Book = new(Book)
		err := row.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.Category,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		)
		if err == pgx.ErrNoRows {
			return (*Book)(nil), cacheDuration, nil
		}
		return i, cacheDuration, err
	}
	if q.cache == nil {
		i, _, err := dbRead()
		return i.(*Book), err
	}

	var i *Book
	err := q.cache.GetWithTtl(ctx, fmt.Sprintf("books:GetBookByID:%+v", id), i, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return i, err
}

const listByCategory = `-- name: ListByCategory :many
SELECT id, name, description, metadata, category, price, created_at, updated_at
FROM
  books
WHERE
  category = $1 AND id > $2
ORDER BY
  id
LIMIT $3
`

type ListByCategoryParams struct {
	Category BookCategory
	After    int64
	First    int32
}

func (q *Queries) ListByCategory(ctx context.Context, arg ListByCategoryParams) ([]Book, error) {
	rows, err := q.db.WQuery(ctx, "ListByCategory", listByCategory, arg.Category, arg.After, arg.First)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i *Book = new(Book)
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Metadata,
			&i.Category,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, *i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return items, err
}

const updateBookByID = `-- name: UpdateBookByID :exec
UPDATE books
SET
  description = $1, metadata = $2, price = $3, updated_at = NOW()
WHERE
  id = $4
`

type UpdateBookByIDParams struct {
	Description string
	Meta        []byte
	Price       pgtype.Numeric
	ID          int64
}

// -- invalidate : [GetBookByID]
func (q *Queries) UpdateBookByID(ctx context.Context, arg UpdateBookByIDParams, getBookByID *int64) error {
	_, err := q.db.WExec(ctx, "UpdateBookByID", updateBookByID,
		arg.Description,
		arg.Meta,
		arg.Price,
		arg.ID,
	)
	if err != nil {
		return err
	}
	// invalidate
	_ = q.db.PostExec(func() error {
		var anyErr error
		if getBookByID != nil {
			key := fmt.Sprintf("books:GetBookByID:%+v", *getBookByID)
			err = q.cache.Invalidate(ctx, key)
			if err != nil {
				log.Error().Err(err).Msgf(
					"Failed to invalidate: %s", key)
				anyErr = err
			}
		}
		return anyErr
	})
	return nil
}

//// auto generated functions

func (q *Queries) Dump(ctx context.Context, beforeDump ...BeforeDump) ([]byte, error) {
	sql := "SELECT id,name,description,metadata,category,price,created_at,updated_at FROM books ORDER BY id,name,description,metadata,category,price,created_at,updated_at ASC;"
	rows, err := q.db.WQuery(ctx, "Dump", sql)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var v Book
		if err := rows.Scan(&v.ID, &v.Name, &v.Description, &v.Metadata, &v.Category, &v.Price, &v.CreatedAt, &v.UpdatedAt); err != nil {
			return nil, err
		}
		for _, applyBeforeDump := range beforeDump {
			applyBeforeDump(&v)
		}
		items = append(items, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	bytes, err := json.MarshalIndent(items, "", "  ")
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

func (q *Queries) Load(ctx context.Context, data []byte) error {
	sql := "INSERT INTO books (id,name,description,metadata,category,price,created_at,updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8);"
	rows := make([]Book, 0)
	err := json.Unmarshal(data, &rows)
	if err != nil {
		return err
	}
	for _, row := range rows {
		_, err := q.db.WExec(ctx, "Load", sql, row.ID, row.Name, row.Description, row.Metadata, row.Category, row.Price, row.CreatedAt, row.UpdatedAt)
		if err != nil {
			return err
		}
	}
	return nil
}

// eliminate unused error
var _ = log.Logger
var _ = fmt.Sprintf("")
var _ = time.Now()
var _ = json.RawMessage{}
