// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0-65-g3c49d34e-wicked-fork
// source: query.sql

package books

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/rs/zerolog/log"
)

const listByCategory = `-- name: ListByCategory :many
SELECT id, name, description, metadata, category, price, created_at, updated_at
FROM
  books
WHERE
  category = $1 AND id > $2
ORDER BY
  id
LIMIT $3
`

type ListByCategoryParams struct {
	Category BookCategory
	After    int64
	First    int32
}

// CacheKey - cache key
func (arg ListByCategoryParams) CacheKey() string {
	prefix := "books:ListByCategory:"
	return prefix + fmt.Sprintf("%+v,%+v,%+v", arg.Category, arg.After, arg.First)
}

// -- cache : 30s
func (q *Queries) ListByCategory(ctx context.Context, arg ListByCategoryParams) ([]Book, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 30000)
		rows, err := q.db.WQuery(ctx, "ListByCategory", listByCategory, arg.Category, arg.After, arg.First)
		if err != nil {
			return nil, 0, err
		}
		defer rows.Close()
		var items []Book
		for rows.Next() {
			var i *Book = new(Book)
			if err := rows.Scan(
				&i.ID,
				&i.Name,
				&i.Description,
				&i.Metadata,
				&i.Category,
				&i.Price,
				&i.CreatedAt,
				&i.UpdatedAt,
			); err != nil {
				return nil, 0, err
			}
			items = append(items, *i)
		}
		if err := rows.Err(); err != nil {
			return nil, 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]Book), err
	}
	var items []Book
	err := q.cache.GetWithTtl(ctx, arg.CacheKey(), &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}

	return items, err
}

//// auto generated functions

func (q *Queries) Dump(ctx context.Context, beforeDump ...BeforeDump) ([]byte, error) {
	sql := "SELECT id,name,description,metadata,category,price,created_at,updated_at FROM books ORDER BY id,name,description,metadata,category,price,created_at,updated_at ASC;"
	rows, err := q.db.WQuery(ctx, "Dump", sql)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var v Book
		if err := rows.Scan(&v.ID, &v.Name, &v.Description, &v.Metadata, &v.Category, &v.Price, &v.CreatedAt, &v.UpdatedAt); err != nil {
			return nil, err
		}
		for _, applyBeforeDump := range beforeDump {
			applyBeforeDump(&v)
		}
		items = append(items, v)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	bytes, err := json.MarshalIndent(items, "", "  ")
	if err != nil {
		return nil, err
	}
	return bytes, nil
}

func (q *Queries) Load(ctx context.Context, data []byte) error {
	sql := "INSERT INTO books (id,name,description,metadata,category,price,created_at,updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8);"
	rows := make([]Book, 0)
	err := json.Unmarshal(data, &rows)
	if err != nil {
		return err
	}
	for _, row := range rows {
		_, err := q.db.WExec(ctx, "Load", sql, row.ID, row.Name, row.Description, row.Metadata, row.Category, row.Price, row.CreatedAt, row.UpdatedAt)
		if err != nil {
			return err
		}
	}
	return nil
}

// eliminate unused error
var _ = log.Logger
var _ = fmt.Sprintf("")
var _ = time.Now()
var _ = json.RawMessage{}
